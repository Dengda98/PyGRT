# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Zhu Dengda
# This file is distributed under the same license as the PyGRT package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyGRT 0.6.1.dev1+g4641a40.d20250422\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-20 11:57+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/install.rst:3
msgid "安装"
msgstr "Installation"

#: ../../source/install.rst
msgid "Author"
msgstr ""

#: ../../source/install.rst:5
msgid "Zhu Dengda"
msgstr ""

#: ../../source/install.rst
msgid "Email"
msgstr ""

#: ../../source/install.rst:6
msgid "zhudengda@mail.iggcas.ac.cn"
msgstr ""

#: ../../source/install.rst:14
msgid "依赖"
msgstr "Dependency"

#: ../../source/install.rst:16
msgid "如果想使用 C 程序 :command:`grt` ，"
msgstr "If you want to use C program :command:`grt` ,"

#: ../../source/install.rst:18
msgid "`FFTW <https://www.fftw.org/>`_ ，其静态库已链接到预构建版本"
msgstr "`FFTW <https://www.fftw.org/>`_, its static library has been linked to the pre-built version."

#: ../../source/install.rst:19
msgid "`NetCDF <https://www.unidata.ucar.edu/software/netcdf>`_ ，其静态库已链接到预构建版本"
msgstr "`NetCDF <https://www.unidata.ucar.edu/software/netcdf>`_, its static library has been linked to the pre-built version."

#: ../../source/install.rst:20
msgid ""
"`Seismic Analysis Code (SAC) "
"<http://www.iris.edu/ds/nodes/dmc/forms/sac/>`_ ，需在对应网址申请下载。 用于用户进一步处理 "
"SAC 格式的输出波形。"
msgstr ""
"`Seismic Analysis Code (SAC) "
"<http://www.iris.edu/ds/nodes/dmc/forms/sac/>`_ ，download from the website。"
"Used for users to further process the output waveform in the SAC format."

#: ../../source/install.rst:23
msgid "如果你想以Python脚本形式使用，依赖已在 :file:`setup.py` 中写好，直接使用 :command:`pip` 安装即可。"
msgstr ""
"If you want to use it as Python scripts, you can install the dependencies"
" in :file:`setup.py` using :command:`pip`."

#: ../../source/install.rst:27
msgid "安装预构建版本"
msgstr "Install the pre-built version"

#: ../../source/install.rst:29
msgid ""
"目前 **PyGRT** 已分发内置预构建二进制文件的安装包，用户仅需运行以下命令即可（建议使用 `Anaconda "
"<https://anaconda.org>`_ 虚拟环境）"
msgstr ""
"**PyGRT** is now distributed with pre-built binaries, allowing users "
"to install it simply by running the following command (Recommend "
"`Anaconda <https://anaconda.org>`_  virtual environment)"

#: ../../source/install.rst:35
msgid "或者从 |gr| 中下载最新版本的程序压缩包（符合自己的操作系统），解压，在根目录下运行以下命令即可"
msgstr ""
"Or download the latest version from |gr| (compatible with your operating "
"system), uncompress it, and run the following command in the root "
"directory"

#: ../../source/install.rst:41
msgid ""
"如果你不想使用Python，只想使用传统的命令行形式运行C程序，也可从 |gr| 中下载最新版本的程序压缩包（符合自己的操作系统）， 解压，其中 "
":rst:dir:`pygrt/C_extension/bin` 和 :rst:dir:`pygrt/C_extension/lib` "
"为预构建好的可执行文件目录和动态/静态库目录， 按自己习惯配置环境变量 :envvar:`PATH` 即可（详见下方）。"
msgstr ""
"If you don't want to use Python and only want to run C programs in the "
"traditional command-line form, you can also download the latest version "
"from |gr| (compatible with your operating system), uncompress it, inside "
":rst:dir:`pygrt/C_extension/bin` and :rst:dir:`pygrt/C_extension/lib` are"
" the pre-built executable files and the dynamic/static libraries, with"
" the :envvar:`PATH` environment variable configured as you like (see "
"below)."

#: ../../source/install.rst:47
msgid "环境变量配置"
msgstr "Environment variable configuration"

#: ../../source/install.rst:48
msgid ""
"如果你使用 :command:`pip` 安装后，想使用构建好的C程序 :command:`grt` ，需配置环境变量 "
":envvar:`PATH` 。运行以下命令"
msgstr ""
"If you want to use the containing C programs :command:`grt`  after "
"running :command:`pip install`, you need to configure environment "
"variable :envvar:`PATH`. Running command below."

#: ../../source/install.rst:54
msgid "输出"
msgstr "output"

#: ../../source/install.rst:62
msgid "将其中的 “PyGRT executable file directory” 路径添加到环境变量 :envvar:`PATH` 中即可。"
msgstr ""
"Add the \"PyGRT executable file directory\" path to the environment "
"variable  :envvar:`PATH`. "

#: ../../source/install.rst:64
msgid "如果是从 |gr| 上直接下载的压缩包，则只需将解压后的 :rst:dir:`bin/` 路径添加到环境变量 :envvar:`PATH` 中即可。"
msgstr ""
"If you downloaded the program directly from |gr|, simply add the "
"extracted :rst:dir:`bin/` path to the :envvar:`PATH` environment "
"variable."

#: ../../source/install.rst:66
msgid "C程序 :command:`grt` 的运行独立于Python，每个C程序可使用 ``-h`` 查看帮助。"
msgstr ""
"C programs :command:`grt` run independently of Python. For each C "
"program, use ``-h`` to see help."

#: ../../source/install.rst:70
msgid "从源码构建安装"
msgstr "Build from source"

#: ../../source/install.rst:72
msgid ""
"如果安装好预构建版本后，运行 C 或 Python 提示 “GLIBC” "
"版本缺失以及其它库的版本问题，可尝试从源码从头构建二进制库文件和可执行文件。"
msgstr ""
"If, after installing the pre-built version, running C or Python "
"reports a missing \"GLIBC\" version or other library version issues, try "
"build the binary libraries and executables from source."

#: ../../source/install.rst:74
msgid "安装程序开发所需的基本工具，如 :command:`gcc` 编译器， :command:`make` 工具等。"
msgstr ""
"Install the basic tools required for program development, such as the "
":command:`gcc` compiler and :command:`make` tool."

#: ../../source/install.rst:76
msgid "安装 `NetCDF <https://www.unidata.ucar.edu/software/netcdf>`_ 。"
msgstr "Install `NetCDF <https://www.unidata.ucar.edu/software/netcdf>`_ ."

#: ../../source/install.rst:78
msgid "安装 `FFTW <https://www.fftw.org/>`_ 。"
msgstr "Install `FFTW <https://www.fftw.org/>`_ ."

#: ../../source/install.rst:80
msgid ""
"要求安装双精度和单精度两个版本，且要求编译出静态库，并要求在环境变量 :envvar:`LIBRARY_PATH` "
"中配置静态库路径。如果从源码编译安装 FFTW ，通常在其目录下运行以下命令即可安装+配置路径成功（以 Ubuntu 系统为例）："
msgstr ""
"Both double-precision and single-precision versions are required, and "
"static libraries must be compiled. The static library path should be "
"configured in the :envvar:`LIBRARY_PATH` environment variable. If "
"installing FFTW from source, usually run the following commands in its "
"directory to install and configure the path successfully (using Ubuntu as"
" an example):"

#: ../../source/install.rst:94
msgid "构建 **PyGRT** 。"
msgstr "Build **PyGRT**."

#: ../../source/install.rst:96
msgid ""
"切换到 **PyGRT** 程序目录（不论是使用 :command:`pip` 安装的还是从 |gr| 下载的），切换到 "
":rst:dir:`pygrt/C_extension` ，运行"
msgstr ""
"Switch to the **PyGRT** program directory (whether installed via "
":command:`pip` or downloaded from |gr|), then switch to "
":rst:dir:`pygrt/C_extension` and run"

#: ../../source/install.rst:102
msgid ""
"进行构建。成功后会在 :rst:dir:`bin/` 和 :rst:dir:`lib/` 路径下看到新构建出来的可执行文件和库文件。如果正确配置了"
" :envvar:`PATH` 可尝试运行 :command:`grt -h` 看能否正常打印帮助文档。再运行"
msgstr ""
"to build. After successful compilation, you will see the newly built "
"executables and libraries in :rst:dir:`bin/` and :rst:dir:`lib/`. If "
":envvar:`PATH` is configured correctly, you can try running :command:`grt"
" -h` to check if the help documentation prints normally. Then run"

#: ../../source/install.rst:108
msgid "可清理构建过程产生的中间文件夹 :rst:dir:`build/` 。"
msgstr ""
"You can clean up the intermediate :rst:dir:`build/` folder generated "
"during compilation."

#: ../../source/install.rst:111
msgid "常见问题"
msgstr "FAQs"

#: ../../source/install.rst:112
msgid ""
"如果运行报错，提示缺少依赖（常见于MacOS），这通常是缺少 ``OpenMP`` 库。尝试安装 :command:`gcc` 编译器，其中会自带"
" ``OpenMP``。"
msgstr ""
"If you get an error indicating a missing dependency (usually on MacOS), "
"it's usually the absence of the ``OpenMP`` library. Try installing the "
":command:`gcc` compiler, which comes with ``OpenMP``"

#: ../../source/install.rst:113
msgid "“GLIBC” 版本缺失：请尝试从源码构建。"
msgstr "Missing \"GLIBC\" version: try to build from source."

