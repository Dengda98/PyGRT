name: Build C programs and libraries, and Upload artifacts

on:
  push:
    tags:
      - "v*.*.*"  

jobs:
  build: # 编译C程序和C库
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x86_64                  # Ubuntu x86_64
          - os: macos-13
            arch: x86_64                  # macOS Intel
          - os: macos-14
            arch: arm64                   # macOS Apple Silicon
      
      fail-fast: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  
      
      # --------------------- 检查文件中的版本名是否和tag名相符 --------------------
      - name: Check version
        run: |
          TAG_NAME=${{ github.ref_name }}
          PYVERSION_FILE="pygrt/_version.py"
          CVERSION_FILE="pygrt/C_extension/version"

          # 提取 Python 版本号
          PYTHON_VERSION=$(sed -n 's/^__version__ = "\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\)"/\1/p' ${PYVERSION_FILE})
          if [ -z "$PYTHON_VERSION" ]; then
            echo "Error: Failed to extract version from ${PYVERSION_FILE}"
            exit 1
          fi

          # 读取 C 版本号
          if [ ! -f "$CVERSION_FILE" ]; then
            echo "Error: File ${CVERSION_FILE} not found"
            exit 1
          fi
          C_VERSION=$(cat "$CVERSION_FILE")
          if [ -z "$C_VERSION" ]; then
            echo "Error: Failed to read version from ${CVERSION_FILE}"
            exit 1
          fi

          # 检查 Python 版本与 Tag 是否匹配
          if [ "$PYTHON_VERSION" != "${TAG_NAME#v}" ]; then
            echo "Error: Version mismatch between tag (${TAG_NAME}) and ${PYVERSION_FILE} (${PYTHON_VERSION})"
            exit 1
          fi

          # 检查 C 版本与 Python 版本是否匹配
          if [ "$C_VERSION" != "${PYTHON_VERSION%.*}" ]; then
            echo "Error: Version mismatch between ${PYVERSION_FILE} (${PYTHON_VERSION}) and ${CVERSION_FILE} (${C_VERSION})"
            exit 1
          fi

          echo "Version check passed:"
          echo "  Tag: ${TAG_NAME}"
          echo "  Python version: ${PYTHON_VERSION}"
          echo "  C version: ${C_VERSION}"
      
      # --------------------------- 安装依赖 ------------------------------------------
      - name: Install dependencies (Ubuntu)
        if: contains(matrix.os, 'ubuntu')    
        run: |
          sudo apt update
          sudo apt install -y libfftw3-dev

      - name: Install dependencies (macOS)
        # 匹配包含 "macos" 的操作系统
        if: contains(matrix.os, 'macos')    
        run: |
          brew install libomp
          brew install fftw

          FFTW_PREFIX=$(brew --prefix fftw)
          echo "FFT_INC_PATH=$FFTW_PREFIX/include" >> $GITHUB_ENV
          echo "FFT_LIB_PATH=$FFTW_PREFIX/lib" >> $GITHUB_ENV

      # ----------------- 编译C库和C程序 ----------------------------------
      - name: Build the project (macOS)
        if: contains(matrix.os, 'macos')    
        run: |
          
          cd pygrt/C_extension
          # Mac系统需要显式设置头文件路径和库路径
          export C_INCLUDE_PATH=$FFT_INC_PATH:$C_INCLUDE_PATH
          export LIBRARY_PATH=$FFT_LIB_PATH:${LIBRARY_PATH}
          export LD_LIBRARY_PATH=$FFT_LIB_PATH:${LD_LIBRARY_PATH}  
          export DYLD_LIBRARY_PATH=$FFT_LIB_PATH:${DYLD_LIBRARY_PATH}  

          make ARCH=${{ matrix.arch }} \
                CC=gcc-14 \
                LFFT_FLAGS="$FFT_LIB_PATH/libfftw3.a $FFT_LIB_PATH/libfftw3f.a"
          cd -

      - name: Build the project (Ubuntu)
        if: contains(matrix.os, 'ubuntu')       
        run: |
          
          cd pygrt/C_extension 
          make 
          cd -


      # --------------------搭建python环境，开始测试，并制作wheel文件 ------------------------------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' 

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel build
          pip install -v .

      - name: Test the project
        run: |
          export PATH=$(pwd)/pygrt/C_extension/bin:${PATH}
         
          cp -r example test_tmp

          # test1 
          cd test_tmp/compare_results 
          chmod +x *.sh
          ./run_milrow_grt.sh
          python plot_cps_grt.py
          python plot_cps_pygrt.py
          cd -

          # test2
          cd test_tmp/site_effect
          chmod +x *.sh 
          ./run1.sh
          python run2.py
          cd -

          rm -rf test_tmp  
      
      # --------------------------- 打包整个程序 ---------------------
      - name: Package the binary
        run: |
          PACK_NAME=pygrt_kit-${{ github.ref_name }}-${{ matrix.os }}-${{ matrix.arch }}
          echo "PACK_NAME=$PACK_NAME" >> $GITHUB_ENV
          FILE_CONTENT=$(ls)
          mkdir -p $PACK_NAME
          cp -r ${FILE_CONTENT} $PACK_NAME/
          tar -czvf $PACK_NAME.tar.gz $PACK_NAME
          rm -rf $PACK_NAME
      
      # --------------------------- 制作wheels ---------------------
      - name: Build the Python Wheel
        run: |
          # wheel文件输出在dist/目录下，还有其它辅助文件，还需检查如何删除
          python setup.py bdist_wheel  # 只制作wheel，这里不打包源码 

      # -------------------- upload artifacts -----------------------
      - name: Upload artifact (*.tar.gz)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACK_NAME }}_tar
          path: ${{ env.PACK_NAME }}.tar.gz
            
      - name: Upload artifact (*.whl)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACK_NAME }}_whl
          path: dist/*.whl

  
  release: # 创建Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: "*_tar"

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/*.tar.gz

  publish_pypi: # 上传pypi
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps: 
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: "*_whl" 

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Pypi Publish
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: artifacts/*/


          